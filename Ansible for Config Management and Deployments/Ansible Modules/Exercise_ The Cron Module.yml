1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.

    [test@tcox3 ~]$ ansible --version

    ansible 1.9.2

      configured module search path = None

 

2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.

    [test@tcox3 ~]$ ansible all --list-hosts

        tcox5.mylabserver.com

        localhost

        tcox4.mylabserver.com

     

3. Create a playbook, using the 'service' module that accomplishes the following:

- Uses SSH

- Logs in to the remote system as 'test' user

- Connects to one server or group from Step #2 above

- The playbook DOES NOT runs as 'sudo'

- Creates a cron job, as the test user, that lists the contents of /var/log on the remote system at 1am every day, and logs the output to a file in /home/test called 'cron.log'. Name the job 'list dirs' as part of the command.

    [test@tcox3 Playbooks]$ vim cron.yml

    [test@tcox3 Playbooks]$ cat cron.yml

    --- # CRON MODULE EXAMPLE

    - hosts: apacheweb

      user: test

      connection: ssh

      gather_facts: no

      tasks:

        - name: Add a CRON Job to the Test User

          cron: name="list dirs" minute="0" hour="1" job="ls -al /var/log > /home/test/cron.log"

 

4. Run the playbook and display the results.

    [test@tcox3 Playbooks]$ ansible-playbook cron.yml

     

    PLAY [apacheweb] **************************************************************

     

    TASK: [Add a CRON Job to the Test User] ***************************************

    changed: [tcox4.mylabserver.com]

     

    PLAY RECAP ********************************************************************

    tcox4.mylabserver.com      : ok=1    changed=1    unreachable=0    failed=0

    (SECOND SERVER)

    [test@tcox4 ~]$ crontab -l

    #Ansible: list dirs

    0 1 * * * ls -al /var/log > /home/test/cron.log

1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.
[test@tcox3 ~]$ ansible --version
ansible 1.9.2
  configured module search path = None
 
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.
[test@tcox3 ~]$ ansible all --list-hosts
    tcox5.mylabserver.com
    localhost
    tcox4.mylabserver.com
 
3. Create an outline that lists the installation and configuration process for an Apache web server(s) with the following kinds of information (add to this list as needed):
- Uses SSH
- Logs in to the remote system as 'test' user
- Connects to one server or group from Step #2 above
- Creates a list of 'things we need to know' (variables)
- List of 'things that need to be done' (tasks)
 
- How do we test (tasks, handlers and/or debug statements)
[test@tcox3 usecases]$ vim mywebserver.txt
[test@tcox3 usecases]$ cat mywebserver.txt
- Build an Apache Web Server
- Deploy the webserver with the ansible user
- Ansible user needs sudo
- Connection type ssh rather than paramiko
- Leave gathering of facts on
 
- Info Needed:
  - apache web server package name
  - distribution running on
  - apache version
  - need the web server directory customized
  - what is the site name
 
- What needs to be done
  - install the apache web server on the remote system(s)
  - create the web server directory
  - web server directory has proper ownership
  - configuration of apache
    - copy the http configuration file
    - set up the vhost directory
    - add any ssl keys if needed
    - add the vhost template for the default site
  - copy the site code to the new directory
  - start the apache service
  - add/enable any modules needed
    - mysql/mariadb
    - ssl
    - mod/rewrite
  - restart the apache service (or move the start to here)
 
- Test
  - using lynx or telnet, test that the web service is running
    - waitfor port 80 to be listening
  - register output for the service status as JSON on the completion of the playbook